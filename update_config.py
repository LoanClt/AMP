import json
import numpy as np
import scipy.constants as cst
from scipy.special import loggamma

def update_AMP(FILE_NAME, AMP):

    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        config = json.load(file)
        
    data = config[AMP]

    data["FAISCEAU_IR"]["WAIST"] = data["FAISCEAU_IR"]["DIAMETRE"]/(2/2**(0.5/data["FAISCEAU_IR"]["PROFIL_SPATIAL"]))/(np.log(2))**(0.5/data["FAISCEAU_IR"]["PROFIL_SPATIAL"])
    if data["FAISCEAU_IR"]["PROFIL_SPATIAL"] > 1:
        data["FAISCEAU_IR"]["RAYON_EQUIVALENT"] = data["FAISCEAU_IR"]["DIAMETRE"]/2
    else:
        data["FAISCEAU_IR"]["RAYON_EQUIVALENT"] = data["FAISCEAU_IR"]["WAIST"]*np.sqrt(2)/2
    data["FAISCEAU_IR"]["SURFACE_EQUIVALENTE"] = np.pi*data["FAISCEAU_IR"]["RAYON_EQUIVALENT"]**2/100
    data["FAISCEAU_IR"]["FLUENCE_IR"] = data["FAISCEAU_IR"]["ENERGIE"]/1000/data["FAISCEAU_IR"]["SURFACE_EQUIVALENTE"]
    
    data["CRISTAL_TISA_POMPE"]["FREQUENCE_RESONNANCE"] = 2*np.pi*299792458/data["CRISTAL_TISA_POMPE"]["LONGUEUR_ONDE_RESONNANCE"]/0.000000001
    data["CRISTAL_TISA_POMPE"]["FLUENCE_SATURATION_LR"] = cst.h*data["CRISTAL_TISA_POMPE"]["FREQUENCE_RESONNANCE"]/2/np.pi/data["CRISTAL_TISA_POMPE"]["SECTION_EFFICACE_EMISSION_LR"]
    
    data["FAISCEAU_IR"]["SATURATION"] = data["FAISCEAU_IR"]["FLUENCE_IR"]/data["CRISTAL_TISA_POMPE"]["FLUENCE_SATURATION_LR"]
    if AMP == "AMP1":
        data["FAISCEAU_IR"]["DUREE_ETIREE"] = data["FAISCEAU_IR"]["LARGEUR_SPECTRALE"]*7
    data["FAISCEAU_IR"]["FREQUENCE_CENTRALE"] = 2*np.pi*299792458/data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/0.000000001
    data["FAISCEAU_IR"]["CHIRP"] = np.pi*299792458*data["FAISCEAU_IR"]["LARGEUR_SPECTRALE"]/data["FAISCEAU_IR"]["DUREE_ETIREE"]/0.000000000001/data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/0.000000001
    data["FAISCEAU_IR"]["ECLAIREMENT"] = data["FAISCEAU_IR"]["ENERGIE"]/1000/data["FAISCEAU_IR"]["SURFACE_EQUIVALENTE"]/data["FAISCEAU_IR"]["DUREE_ETIREE"]/0.000001

    data["CRISTAL_TISA_POMPE"]["INDICE_REFRACTION_LP"] = (1+(1.041*(data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)/(((data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)-0.0004)+(1.03*(data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)/(((data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)-0.0141)+(3.55*(data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)/(((data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/1000)**2)-123.8))**0.5

    data["CRISTAL_TISA_POMPE"]["TEMPS_VIE_NIV2"] = 1000000*((1/data["CRISTAL_TISA_POMPE"]["TEMPS_VIE_RADIATIF_NIV2"]/0.000001)+(1/data["CRISTAL_TISA_POMPE"]["TEMPS_VIE_NON_RADIATIF_NIV2"]/0.000000001)*np.exp(-data["CRISTAL_TISA_POMPE"]["DELTA_E"]*1.99437127E-23/1.381E-23/data["CRISTAL_TISA"]["TEMPERATURE_CRISTAL"]))**(-1)

    data["CRISTAL_TISA_POMPE"]["EFFICACITE_QUANTIQUE"] = data["CRISTAL_TISA_POMPE"]["TEMPS_VIE_NIV2"]/data["CRISTAL_TISA_POMPE"]["TEMPS_VIE_RADIATIF_NIV2"]

    data["CRISTAL_TISA_POMPE"]["DEFAUT_QUANTIQUE"] = data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]/data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]

    data["CRISTAL_TISA_POMPE"]["ABSORPTION_LINEAR"] = -np.log((1-data["CRISTAL_TISA"]["ABSORPTION_A_532NM"]))/(data["CRISTAL_TISA"]["LONGUEUR"]/1000)

    data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"] = data["FAISCEAU_IR"]["RAYON_EQUIVALENT"]/data["GEOMETRIE_AMPLIFICATEUR"]["IR_POMPE"]

    if data["FAISCEAU_POMPE"]["PROFIL_SPATIAL"] > 1:
        data["FAISCEAU_POMPE"]["WAIST"] = 2*data["FAISCEAU_POMPE"]["PROFIL_SPATIAL"]/(2/2**(0.5/data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"]))/(np.log(2))**(0.5/data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"])
        data["FAISCEAU_POMPE"]["DIAMETRE"] = 2*data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"]
    else:
        data["FAISCEAU_POMPE"]["WAIST"] = 2*data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"]/2**0.5
        data["FAISCEAU_POMPE"]["DIAMETRE"] =  data["FAISCEAU_POMPE"]["WAIST"]*(2/2**(0.5/data["FAISCEAU_POMPE"]["PROFIL_SPATIAL"]))*(np.log(2))**(0.5/data["FAISCEAU_POMPE"]["PROFIL_SPATIAL"])

    data["CRISTAL_TISA"]["SEUIL_LASAGE_TRANSVERSE"] = data["CRISTAL_TISA_POMPE"]["FLUENCE_SATURATION_LR"]*np.log(1/((data["CRISTAL_TISA_POMPE"]["INDICE_REFRACTION_LP"]-data["CRISTAL_TISA"]["INDICE_REFRACTION_REFROIDISSEMENT"])**2/(data["CRISTAL_TISA_POMPE"]["INDICE_REFRACTION_LP"]+data["CRISTAL_TISA"]["INDICE_REFRACTION_REFROIDISSEMENT"])**2))/data["CRISTAL_TISA_POMPE"]["EFFICACITE_QUANTIQUE"]/data["CRISTAL_TISA_POMPE"]["DEFAUT_QUANTIQUE"]/data["CRISTAL_TISA_POMPE"]["ABSORPTION_LINEAR"]/(data["FAISCEAU_POMPE"]["DIAMETRE"]/1000)

    data["FAISCEAU_POMPE"]["SURFACE_EQUIVALENTE"] = np.pi*data["FAISCEAU_POMPE"]["RAYON_EQUIVALENT"]**2/100

    data["FAISCEAU_POMPE"]["FLUENCE_POMPE"] = data["FAISCEAU_POMPE"]["ENERGIE_FACE"]/data["FAISCEAU_POMPE"]["SURFACE_EQUIVALENTE"]/1000

    data["CRISTAL_TISA"]["ECART_LASAGE_TRANSVERSE"] = data["FAISCEAU_POMPE"]["FLUENCE_POMPE"]/data["CRISTAL_TISA"]["SEUIL_LASAGE_TRANSVERSE"]

    data["FAISCEAU_POMPE"]["ENERGIE_LASER_TOTALE"] = 2*data["FAISCEAU_POMPE"]["ENERGIE_FACE"]

    if data["GEOMETRIE_AMPLIFICATEUR"]["FEEDBACK"] == 1:
        data["FAISCEAU_POMPE"]["ENERGIE_STOCKEE"] = data["CRISTAL_TISA"]["ABSORPTION_A_532NM"]*data["FAISCEAU_POMPE"]["ENERGIE_LASER_TOTALE"]*(2-data["CRISTAL_TISA"]["ABSORPTION_A_532NM"])*data["CRISTAL_TISA_POMPE"]["EFFICACITE_QUANTIQUE"]*data["CRISTAL_TISA_POMPE"]["DEFAUT_QUANTIQUE"]
    else:
        data["FAISCEAU_POMPE"]["ENERGIE_STOCKEE"] = data["CRISTAL_TISA"]["ABSORPTION_A_532NM"]*data["FAISCEAU_POMPE"]["ENERGIE_LASER_TOTALE"]*data["CRISTAL_TISA_POMPE"]["EFFICACITE_QUANTIQUE"]*data["CRISTAL_TISA_POMPE"]["DEFAUT_QUANTIQUE"]

    data["FAISCEAU_POMPE"]["PUISSANCE_THERMIQUE"] = (data["FAISCEAU_POMPE"]["ENERGIE_STOCKEE"]/(data["CRISTAL_TISA_POMPE"]["EFFICACITE_QUANTIQUE"]*data["CRISTAL_TISA_POMPE"]["DEFAUT_QUANTIQUE"])-data["FAISCEAU_POMPE"]["ENERGIE_STOCKEE"])*data["FAISCEAU_POMPE"]["TAUX_REPETITION"]/1000

    data["CRISTAL_TISA_POMPE"]["VARIATION_INDICE_DN_DT"] = 0.00000411-0.0000000001565*data["CRISTAL_TISA"]["TEMPERATURE_CRISTAL"]+0.00000000006449*data["CRISTAL_TISA"]["TEMPERATURE_CRISTAL"]**2

    data["FAISCEAU_POMPE"]["FOCALE_THERMIQUE"] = data["FAISCEAU_POMPE"]["SURFACE_EQUIVALENTE"]*data["CRISTAL_TISA_POMPE"]["CONDUCTIBILITE_THERMIQUE"]/10000/data["FAISCEAU_POMPE"]["PUISSANCE_THERMIQUE"]/(data["CRISTAL_TISA_POMPE"]["VARIATION_INDICE_DN_DT"]+(2*0.5*data["CRISTAL_TISA"]["DIAMETRE"]*data["CRISTAL_TISA_POMPE"]["EXPANSION_THERMIQUE"]*(data["CRISTAL_TISA_POMPE"]["INDICE_REFRACTION_LP"]-1))/data["CRISTAL_TISA"]["LONGUEUR"])

    data["FAISCEAU_POMPE"]["FLUENCE_POMPE_DOMMAGE"] = data["FAISCEAU_POMPE"]["FLUENCE_POMPE"]/data["GEOMETRIE_AMPLIFICATEUR"]["SEUIL_DOMMAGE"]

    data["FAISCEAU_POMPE"]["PUISSANCE"] = data["FAISCEAU_POMPE"]["ENERGIE_LASER_TOTALE"]*data["FAISCEAU_POMPE"]["TAUX_REPETITION"]/1000

    data["CRISTAL_TISA_POMPE"]["POPULATION_INITIALE_NIVEAU_BAS"] = -np.log(1-data["CRISTAL_TISA"]["ABSORPTION_A_532NM"])/(data["CRISTAL_TISA_POMPE"]["SECTION_EFFICACE_ABSORPTION_LP"]*data["CRISTAL_TISA"]["LONGUEUR"]/10)

    data["CRISTAL_TISA_POMPE"]["FLUENCE_SATURATION_ABSORPTION_LP"] = 6.626E-34*299792458/(data["FAISCEAU_POMPE"]["LONGUEUR_ONDE_LP"]*0.000000001)/data["CRISTAL_TISA_POMPE"]["SECTION_EFFICACE_ABSORPTION_LP"]

    data["CRISTAL_TISA_POMPE"]["INDICE_REFRACTION_LC"] = (1+(1.041*(data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)/(((data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)-0.0004)+(1.03*(data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)/(((data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)-0.0141)+(3.55*(data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)/(((data["FAISCEAU_IR"]["LONGUEUR_ONDE_CENTRALE_LC"]/1000)**2)-123.8))**0.5
    
    # Sauvegarde du fichier JSON avec les nouvelles valeurs
    with open(FILE_NAME, "w") as file:
        json.dump(config, file, indent=4)

def update_coef_profil(FILE_NAME):
    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        data = json.load(file)

    data["COEFS_PROFIL"]["FONCTION_GAMME"] = np.exp(loggamma(0.5 / data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"]))
    data["COEFS_PROFIL"]["B0_T"] = np.log(2) * (2 /  data["AMP1"]["FAISCEAU_IR"]["DUREE_ETIREE"] / 0.000000000001) ** (2 * data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"])
    data["COEFS_PROFIL"]["B0_w"] = np.log(2) * (1 / data["AMP1"]["FAISCEAU_IR"]["CHIRP"] / data["AMP1"]["FAISCEAU_IR"]["DUREE_ETIREE"] / 0.000000000001) ** (2 * data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"])
    data["COEFS_PROFIL"]["A0_T"] = data["AMP1"]["FAISCEAU_IR"]["FLUENCE_IR"] / (1 / data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"] / data["COEFS_PROFIL"]["B0_T"] ** (0.5 / data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"])) / data["COEFS_PROFIL"]["FONCTION_GAMME"]
    data["COEFS_PROFIL"]["A0_w"] = data["AMP1"]["FAISCEAU_IR"]["FLUENCE_IR"] / (1 / data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"] / data["COEFS_PROFIL"]["B0_w"] ** (0.5 / data["AMP1"]["FAISCEAU_IR"]["PROFIL_TEMPORAL"])) / data["COEFS_PROFIL"]["FONCTION_GAMME"]

    # Sauvegarde du fichier JSON avec les nouvelles valeurs
    with open(FILE_NAME, "w") as file:
        json.dump(data, file, indent=4)
    

def update_config(FILE_NAME, AMP):
    update_AMP(FILE_NAME, AMP)
    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        updated_config = json.load(file)

    return updated_config

def update_param(FILE_NAME, AMP, SECTION1, SECTION2, VALUE):
    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        data = json.load(file)
        
    data[AMP][SECTION1][SECTION2] = VALUE

    # Sauvegarde du fichier JSON avec les nouvelles valeurs
    with open(FILE_NAME, "w") as file:
        json.dump(data, file, indent=4) 

def update_bilan(FILE_NAME, MISC, VALUE):
    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        data = json.load(file)
        
    data["BILAN_PUISSANCE"][MISC] = VALUE

    # Sauvegarde du fichier JSON avec les nouvelles valeurs
    with open(FILE_NAME, "w") as file:
        json.dump(data, file, indent=4) 

def update_result(FILE_NAME, AMP, PASSAGE, PARAM, VALUE):
    # Chargement du fichier JSON
    with open(FILE_NAME, "r") as file:
        data = json.load(file)
        
    data[AMP]["RESULTATS"][PASSAGE][PARAM] = VALUE

    # Sauvegarde du fichier JSON avec les nouvelles valeurs
    with open(FILE_NAME, "w") as file:
        json.dump(data, file, indent=4)
